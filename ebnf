<program> ::= <block> '.'
<block> ::= [ T_CONST <const_part> ] [ T_VAR <var_part> ] <sub_list> <comp_stmt>
<const_part> ::= <const_def> { ',' <const_def> } ';'
<const_def> ::= IDENT '=' <constant>
<constant> ::= <opt_sign> INT | CHAR
<opt_sign> ::= [ '+' ] | '-'
<var_part> ::= <var_decl> ';' { <var_decl> ';' }
<var_decl> ::= <id_list> ':' <type>
<id_list> ::= IDENT { ',' IDENT }
<type> ::= <basic_type> | T_ARRAY '[' INT ']' T_OF <basic_type>
<basic_type> ::= T_INTEGER | T_CHAR
<sub_list> ::= { T_PROCEDURE <proc_def> | T_FUNCTION <func_def> }
<proc_def> ::= <proc_header> ';' <block> ';'
<func_def> ::= <func_header> ';' <block> ';'
<proc_header> ::= IDENT [ '(' <param_list> ')' ]
<func_header> ::= <proc_header> ':' <basic_type>
<param_list> ::= <param_group> { ';' <param_group> }
<param_group> ::= [ T_VAR ] <id_list> ':' <basic_type>
<comp_stmt> ::= T_BEGIN <stmt_list> T_END
<stmt_list> ::= <stmt> { ';' <stmt> }
<stmt> ::= <call_stmt> | <assign_stmt> | <if_stmt> | <while_stmt> | <do_while_stmt> | <comp_stmt> | <read_stmt> | <write_stmt> | <for_stmt> | 
<call_stmt> ::= IDENT [ '(' <expr_list> ')' ]
<expr_list> ::= <expr> { ',' <expr> }
<expr> ::= <opt_sign> <term> { <add_op> <term> }
<term> ::= <factor> { <mul_op> <factor> }
<factor> ::= ( IDENT [ '[' <expr> ']' | '(' <expr_list> ')' ] | INT | '(' <expr> ')' )
<mul_op> ::= '*' | '/'
<add_op> ::= '+' | '-'
<assign_stmt> ::= <lvalue> BECOMES <expr>
<lvalue> ::= IDENT [ '[' <expr> ']' ]
<if_stmt> ::= T_IF <cond> T_THEN <stmt> [ T_ELSE <stmt> ]
<cond> ::= <expr> <rel_op> <expr>
<rel_op> ::= '<' | GE | '>' | LE | '=' | NE
<while_stmt> ::= T_WHILE <cond> T_DO <stmt>
<do_while_stmt> ::= T_DO <stmt> T_WHILE <cond>
<read_stmt> ::= T_READ '(' <lvalue_list> ')'
<lvalue_list> ::= <lvalue> { ',' <lvalue> }
<write_stmt> ::= T_WRITE '(' ( STRING [ ',' <expr> ] | <expr> ) ')'
<for_stmt> ::= T_FOR <lvalue> BECOMES <expr> ( T_DOWNTO | T_TO ) <expr> T_DO <stmt>
