{ ';' <stmt> }
FIRST: { ';' }
FOLLOW: { T_END }
{ ',' <expr> }
FIRST: { ',' }
FOLLOW: { ')' }
{ <add_op> <term> }
FIRST: { '+' '-' }
FOLLOW: { ',' ';' '=' ']' ')' T_END T_THEN T_ELSE '<' GE '>' LE NE T_DO T_WHILE T_DOWNTO T_TO }
{ <mul_op> <factor> }
FIRST: { '*' '/' }
FOLLOW: { ',' ';' '=' '+' '-' ']' ')' T_END T_THEN T_ELSE '<' GE '>' LE NE T_DO T_WHILE T_DOWNTO T_TO }
{ ',' <lvalue> }
FIRST: { ',' }
FOLLOW: { ')' }
{ ',' <const_def> }
FIRST: { ',' }
FOLLOW: { ';' }
{ <var_decl> ';' }
FIRST: { IDENT }
FOLLOW: { T_PROCEDURE T_FUNCTION T_BEGIN }
{ ',' IDENT }
FIRST: { ',' }
FOLLOW: { ':' }
{ T_PROCEDURE <proc_def> | T_FUNCTION <func_def> }
FIRST: { T_PROCEDURE T_FUNCTION }
FOLLOW: { T_BEGIN }
{ ';' <param_group> }
FIRST: { ';' }
FOLLOW: { ')' }
[ T_CONST <const_part> ]
FIRST: { T_CONST }
FOLLOW: { T_VAR T_PROCEDURE T_FUNCTION T_BEGIN }
[ T_VAR <var_part> ]
FIRST: { T_VAR }
FOLLOW: { T_PROCEDURE T_FUNCTION T_BEGIN }
[ '(' <expr_list> ')' ]
FIRST: { '(' }
FOLLOW: { ';' T_END T_ELSE T_WHILE }
[ '[' <expr> ']' | '(' <expr_list> ')' ]
FIRST: { '[' '(' }
FOLLOW: { ',' ';' '=' '+' '-' ']' ')' T_END '*' '/' T_THEN T_ELSE '<' GE '>' LE NE T_DO T_WHILE T_DOWNTO T_TO }
[ '[' <expr> ']' ]
FIRST: { '[' }
FOLLOW: { ',' ')' BECOMES }
[ T_ELSE <stmt> ]
FIRST: { T_ELSE }
FOLLOW: { ';' T_END T_ELSE T_WHILE }
[ ',' <expr> ]
FIRST: { ',' }
FOLLOW: { ')' }
[ '+' ]
FIRST: { '+' }
FOLLOW: { IDENT INT '(' }
[ '(' <param_list> ')' ]
FIRST: { '(' }
FOLLOW: { ';' ':' }
[ T_VAR ]
FIRST: { T_VAR }
FOLLOW: { IDENT }
( IDENT [ '[' <expr> ']' | '(' <expr_list> ')' ] | INT | '(' <expr> ')' )
FIRST: { IDENT INT '(' }
FOLLOW: { ',' ';' '=' '+' '-' ']' ')' T_END '*' '/' T_THEN T_ELSE '<' GE '>' LE NE T_DO T_WHILE T_DOWNTO T_TO }
( STRING [ ',' <expr> ] | <expr> )
FIRST: { IDENT INT '+' '-' '(' STRING }
FOLLOW: { ')' }
( T_DOWNTO | T_TO )
FIRST: { T_DOWNTO T_TO }
FOLLOW: { IDENT INT '+' '-' '(' }
<add_op>
FIRST: { '+' '-' }
FOLLOW: { IDENT INT '(' }
<assign_stmt>
FIRST: { IDENT }
FOLLOW: { ';' T_END T_ELSE T_WHILE }
<basic_type>
FIRST: { T_INTEGER T_CHAR }
FOLLOW: { ';' ')' }
<block>
FIRST: { T_CONST T_VAR T_PROCEDURE T_FUNCTION T_BEGIN }
FOLLOW: { '.' ';' }
<call_stmt>
FIRST: { IDENT }
FOLLOW: { ';' T_END T_ELSE T_WHILE }
<comp_stmt>
FIRST: { T_BEGIN }
FOLLOW: { '.' ';' T_END T_ELSE T_WHILE }
<cond>
FIRST: { IDENT INT '+' '-' '(' }
FOLLOW: { ';' T_END T_THEN T_ELSE T_WHILE }
<const_def>
FIRST: { IDENT }
FOLLOW: { ',' ';' }
<const_part>
FIRST: { IDENT }
FOLLOW: { T_VAR T_PROCEDURE T_FUNCTION T_BEGIN }
<constant>
FIRST: { INT CHAR '+' '-' }
FOLLOW: { ',' ';' }
<do_while_stmt>
FIRST: { T_DO }
FOLLOW: { ';' T_END T_ELSE T_WHILE }
<expr>
FIRST: { IDENT INT '+' '-' '(' }
FOLLOW: { ',' ';' '=' ']' ')' T_END T_THEN T_ELSE '<' GE '>' LE NE T_DO T_WHILE T_DOWNTO T_TO }
<expr_list>
FIRST: { IDENT INT '+' '-' '(' }
FOLLOW: { ')' }
<factor>
FIRST: { IDENT INT '(' }
FOLLOW: { ',' ';' '=' '+' '-' ']' ')' T_END '*' '/' T_THEN T_ELSE '<' GE '>' LE NE T_DO T_WHILE T_DOWNTO T_TO }
<for_stmt>
FIRST: { T_FOR }
FOLLOW: { ';' T_END T_ELSE T_WHILE }
<func_def>
FIRST: { IDENT }
FOLLOW: { T_PROCEDURE T_FUNCTION T_BEGIN }
<func_header>
FIRST: { IDENT }
FOLLOW: { ';' }
<id_list>
FIRST: { IDENT }
FOLLOW: { ':' }
<if_stmt>
FIRST: { T_IF }
FOLLOW: { ';' T_END T_ELSE T_WHILE }
<lvalue>
FIRST: { IDENT }
FOLLOW: { ',' ')' BECOMES }
<lvalue_list>
FIRST: { IDENT }
FOLLOW: { ')' }
<mul_op>
FIRST: { '*' '/' }
FOLLOW: { IDENT INT '(' }
<opt_sign>
FIRST: { '+' '-' }
FOLLOW: { IDENT INT '(' }
<param_group>
FIRST: { T_VAR IDENT }
FOLLOW: { ';' ')' }
<param_list>
FIRST: { T_VAR IDENT }
FOLLOW: { ')' }
<proc_def>
FIRST: { IDENT }
FOLLOW: { T_PROCEDURE T_FUNCTION T_BEGIN }
<proc_header>
FIRST: { IDENT }
FOLLOW: { ';' ':' }
<program>
FIRST: { T_CONST T_VAR T_PROCEDURE T_FUNCTION T_BEGIN }
FOLLOW: { }
<read_stmt>
FIRST: { T_READ }
FOLLOW: { ';' T_END T_ELSE T_WHILE }
<rel_op>
FIRST: { '=' '<' GE '>' LE NE }
FOLLOW: { IDENT INT '+' '-' '(' }
<stmt>
FIRST: { IDENT T_BEGIN T_IF T_DO T_READ T_WRITE T_FOR }
FOLLOW: { ';' T_END T_ELSE T_WHILE }
<stmt_list>
FIRST: { ';' IDENT T_BEGIN T_IF T_DO T_READ T_WRITE T_FOR }
FOLLOW: { T_END }
<sub_list>
FIRST: { T_PROCEDURE T_FUNCTION }
FOLLOW: { T_BEGIN }
<term>
FIRST: { IDENT INT '(' }
FOLLOW: { ',' ';' '=' '+' '-' ']' ')' T_END T_THEN T_ELSE '<' GE '>' LE NE T_DO T_WHILE T_DOWNTO T_TO }
<type>
FIRST: { T_ARRAY T_INTEGER T_CHAR }
FOLLOW: { ';' }
<var_decl>
FIRST: { IDENT }
FOLLOW: { ';' }
<var_part>
FIRST: { IDENT }
FOLLOW: { T_PROCEDURE T_FUNCTION T_BEGIN }
<write_stmt>
FIRST: { T_WRITE }
FOLLOW: { ';' T_END T_ELSE T_WHILE }
